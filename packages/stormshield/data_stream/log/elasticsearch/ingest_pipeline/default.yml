---
description: Pipeline for processing Stormshield logs.
processors:
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      field: event.original
      copy_from: message

  - script:
      tag: script_kv_parse
      description: Parse key/value pairs from message.
      lang: painless
      source: >-
        ctx["stormshield"] = new HashMap();

        def kvStart = 0;
        def kvSplit = 0;
        def kvEnd = 0;
        def inQuote = false;

        for (int i = 0, n = ctx["message"].length(); i < n; ++i) {
          char c = ctx["message"].charAt(i);
          if (c == (char)'"') {
            inQuote = !inQuote;
          }
          if (inQuote) {
            continue;
          }
          
          if (c == (char)'=') {
            kvSplit = i;
          }
          if (c == (char)' ' || i == n - 1) {
            if (kvStart != kvSplit) {
              def key = ctx["message"].substring(kvStart, kvSplit);
              def value = ctx["message"].substring(kvSplit + 1, i).replace("\"", "");
              ctx["stormshield"][key] = value;
            }

            kvStart = i + 1;
            kvSplit = i + 1;
          }
        }

  - pipeline:
      name: '{{ IngestPipeline "filterstat" }}'
      if: ctx.stormshield.logtype == 'filterstat'
  - pipeline:
      name: '{{ IngestPipeline "monitor" }}'
      if: ctx.stormshield.logtype == 'monitor'

  - remove:
      field:
        - message

on_failure:
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      value: pipeline_error
